{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js Frontend with t-stack-base",
        "description": "Clone and configure the t-stack-base repository as the foundation for the new web interface",
        "details": "1. Clone t-stack-base from GitHub\n2. Install dependencies: npm install\n3. Configure TypeScript, Tailwind CSS, and Next.js settings\n4. Set up environment variables for API endpoints\n5. Create initial folder structure: /components, /lib, /types, /hooks\n6. Configure ESLint and Prettier for code consistency\n7. Set up Vercel deployment configuration",
        "testStrategy": "Verify successful local development server startup, confirm TypeScript compilation, and validate deployment to Vercel preview",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create PostgreSQL Database Schema",
        "description": "Design and implement database schema for earnings data, stocks, and trade history",
        "details": "1. Create tables: earnings_events (id, ticker, date, time, company_name, created_at, updated_at), stocks (ticker, company_name, sector, market_cap), trades (id, ticker, earnings_date, strategy, entry_price, exit_price, pnl, created_at)\n2. Set up indexes on date and ticker for fast queries\n3. Create migration scripts using Prisma or raw SQL\n4. Seed database with sample earnings data for testing\n5. Configure Neon database connection strings for dev/staging/prod",
        "testStrategy": "Run migration scripts successfully, verify data insertion and retrieval, test query performance with 1000+ records",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Build Earnings Calendar Component",
        "description": "Implement interactive calendar with month navigation and earnings day indicators",
        "details": "1. Create Calendar component using react-calendar or custom implementation\n2. Implement date navigation (previous/next month buttons)\n3. Highlight current day on load using new Date()\n4. Add visual indicators (dots/badges) for days with earnings\n5. Style with Tailwind CSS for responsive design\n6. Implement click handler to trigger earnings data fetch for selected date\n7. Add keyboard navigation support (arrow keys, enter/space)",
        "testStrategy": "Test calendar renders correctly, verify date navigation works, confirm earnings indicators appear, test responsive behavior on mobile",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Earnings Data API Endpoints",
        "description": "Build FastAPI endpoints for earnings calendar data retrieval",
        "details": "1. Create GET /api/earnings?date=YYYY-MM-DD endpoint\n2. Implement GET /api/earnings/range?start=YYYY-MM-DD&end=YYYY-MM-DD\n3. Add GET /api/stocks/search?q=query for fuzzy search\n4. Implement caching with Redis for frequent queries\n5. Add rate limiting (100 requests/minute per IP)\n6. Create Pydantic models for request/response validation\n7. Add error handling for invalid dates and API failures",
        "testStrategy": "Test all endpoints with curl/Postman, verify response formats, test caching behavior, validate rate limiting",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Earnings Table Component",
        "description": "Build interactive table displaying earnings data with search and analysis capabilities",
        "details": "1. Create DataTable component using TanStack Table\n2. Display columns: ticker, company name, reporting time (BMO/AMC), market cap, preview metrics\n3. Add sorting by ticker, date, market cap\n4. Implement fuzzy search with fuse.js for real-time filtering\n5. Add 'Analyze' button with play icon for each row\n6. Implement infinite scroll for large datasets\n7. Add loading states and error boundaries",
        "testStrategy": "Test table renders 100+ rows efficiently, verify search filters correctly, test sorting functionality, confirm analyze button triggers correct action",
        "priority": "high",
        "dependencies": [
          1,
          3,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Integrate Alpha Vantage API for Real-time Data",
        "description": "Connect to Alpha Vantage API for live earnings and stock data",
        "details": "1. Create AlphaVantage service class with methods: getEarningsCalendar(), getStockQuote(), getCompanyOverview()\n2. Implement API key management and rotation\n3. Add retry logic with exponential backoff\n4. Cache responses for 15 minutes to reduce API calls\n5. Create fallback to database if API is unavailable\n6. Add error handling for rate limits and API errors\n7. Log all API calls for monitoring",
        "testStrategy": "Test API integration with real calls, verify caching works, simulate API failures and test fallback behavior",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "cancelled",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Build Trade Analysis Engine",
        "description": "Create Python service for earnings volatility analysis and trade recommendations",
        "details": "1. Port existing calculator.py logic to FastAPI service\n2. Create POST /api/analyze endpoint accepting {ticker, earnings_date}\n3. Implement volatility calculation using historical data\n4. Add options chain analysis for strike selection\n5. Create risk/reward calculation engine\n6. Generate trade recommendations with confidence scores\n7. Cache analysis results for 1 hour",
        "testStrategy": "Test analysis with known stocks (AAPL, TSLA), verify calculations match Python GUI, test edge cases like low-volume stocks",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Broker API Abstraction Layer",
        "description": "Create unified interface with Composer.trade API as primary broker for automated trading execution, with Interactive Brokers as fallback option",
        "status": "pending",
        "dependencies": [
          7,
          "15"
        ],
        "priority": "medium",
        "details": "1. Design IBroker interface with methods: connect(), placeOrder(), getPositions(), getAccountInfo()\n2. Implement ComposerTrade adapter as primary broker with full feature support\n3. Implement IBClientPortal adapter for Interactive Brokers as fallback\n4. Create factory pattern for broker selection with Composer.trade as default\n5. Add automatic failover mechanism from Composer.trade to Interactive Brokers\n6. Add paper trading mode toggle for both brokers\n7. Implement order validation before submission with broker-specific rules\n8. Add comprehensive logging for all broker interactions with performance metrics\n9. Create configuration system for broker priority and failover thresholds\n10. Implement health check endpoints for both brokers",
        "testStrategy": "Test Composer.trade API as primary broker with paper trading, verify automatic failover to Interactive Brokers on connection failure, test order placement and validation for both brokers, verify configuration switching",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Create AGNO Backend Integration",
        "description": "Build AGNO app backend for advanced LLM-powered querying",
        "details": "1. Set up AGNO app with FastAPI backend\n2. Create natural language query endpoints: POST /api/query with {question}\n3. Implement context building with earnings data, trade history, market conditions\n4. Add conversation memory for follow-up questions\n5. Create prompt templates for common queries\n6. Implement response streaming for better UX\n7. Add query cost tracking and rate limiting",
        "testStrategy": "Test natural language queries like 'Show me high volatility plays for next week', verify context accuracy, test streaming responses",
        "priority": "medium",
        "dependencies": [
          4,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement WebSocket for Real-time Updates",
        "description": "Add WebSocket support for live earnings updates and trade notifications",
        "details": "1. Set up WebSocket server with FastAPI\n2. Create connection manager for handling multiple clients\n3. Implement real-time earnings updates when new data arrives\n4. Add trade execution notifications\n5. Create subscription system for specific tickers\n6. Implement reconnection logic with exponential backoff\n7. Add heartbeat mechanism for connection health",
        "testStrategy": "Test multiple simultaneous connections, verify real-time updates, test reconnection after network failure",
        "priority": "medium",
        "dependencies": [
          4,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Create Responsive Design and Mobile Support",
        "description": "Ensure full mobile responsiveness and touch-friendly interactions",
        "details": "1. Implement responsive calendar with swipe gestures for month navigation\n2. Create mobile-optimized earnings table with card-based layout\n3. Add touch-friendly buttons and interactive elements\n4. Implement pull-to-refresh for earnings data\n5. Optimize for different screen sizes (320px to 1920px)\n6. Add PWA capabilities (manifest.json, service worker)\n7. Test on iOS Safari, Android Chrome, and desktop browsers",
        "testStrategy": "Test on actual mobile devices, verify touch interactions, test PWA installation, validate responsive breakpoints",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Setup Production Deployment and Monitoring",
        "description": "Configure production deployment with monitoring and rollback capabilities",
        "details": "1. Set up Vercel deployment for frontend with GitHub Actions\n2. Configure Cloud Run deployment for Python backend\n3. Implement health check endpoints for all services\n4. Add error tracking with Sentry for frontend and backend\n5. Create monitoring dashboard with key metrics (API latency, error rates, active users)\n6. Set up automated rollback on deployment failure\n7. Create runbooks for common issues and recovery procedures",
        "testStrategy": "Test deployment pipeline with feature branch, verify rollback works, test error tracking with deliberate errors",
        "priority": "low",
        "dependencies": [
          1,
          4,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Add Stock News Feed Component to Earnings Calendar Page",
        "description": "Integrate a real-time news feed component on the earnings calendar page that displays market news from MarketWatch and Yahoo Finance using the RSS2JSON API, providing contextual news for earnings-related events.",
        "details": "1. Create NewsFeed component as a collapsible sidebar or bottom panel on the earnings calendar page\n2. Implement RSS2JSON API integration for MarketWatch and Yahoo Finance RSS feeds\n3. Create news aggregation service to fetch and merge feeds from both sources\n4. Implement caching strategy with 5-minute refresh intervals to balance freshness and API limits\n5. Add filtering capabilities to show only earnings-related news (filter by keywords: earnings, quarterly, revenue, profit, guidance)\n6. Design responsive card-based layout with: headline, source, timestamp, summary, and link to full article\n7. Implement real-time update indicators (new items badge, subtle animations)\n8. Add search functionality within news feed\n9. Create fallback mechanism for API failures (cached data or static message)\n10. Implement lazy loading for large news lists with virtual scrolling\n11. Add source attribution and link tracking for analytics\n12. Style with consistent theme using Tailwind CSS, ensuring dark mode support",
        "testStrategy": "1. Test RSS2JSON API integration with both MarketWatch and Yahoo Finance feeds\n2. Verify news items render correctly with all required fields (headline, source, timestamp, summary)\n3. Test filtering functionality with various earnings-related keywords\n4. Validate caching behavior - confirm news refreshes every 5 minutes\n5. Test responsive design on mobile, tablet, and desktop viewports\n6. Simulate API failures and verify fallback mechanisms work correctly\n7. Test search functionality with various search terms\n8. Verify real-time update indicators appear when new news arrives\n9. Test performance with 100+ news items using virtual scrolling\n10. Validate all external links open in new tabs with proper security attributes\n11. Test dark mode compatibility for all news feed elements\n12. Confirm analytics tracking fires correctly on link clicks",
        "status": "done",
        "dependencies": [
          3,
          5
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Replace Hard-Coded Date Cutoff with Dynamic Calculation",
        "description": "Replace all hard-coded date cutoffs with a dynamic calculation that sets the cutoff to 2 months forward from the current date minus 1 week, updating all date validation logic across the application.",
        "details": "1. Identify all hard-coded date cutoffs in the codebase (search for magic numbers like '2024-03-15' or similar fixed dates)\n2. Create a centralized date utility function `getDynamicCutoffDate()` that calculates: current date + 2 months - 1 week\n3. Handle edge cases: month/year rollovers, leap years, timezone considerations\n4. Update all date validation logic in:\n   - Earnings data fetching services (replace static date ranges)\n   - Calendar view date range calculations\n   - Trade opportunity filtering logic\n   - Historical data analysis cutoff points\n   - API query parameters for date ranges\n5. Implement proper timezone handling using libraries like date-fns-tz or moment-timezone\n6. Add configuration parameter for the 2-month/1-week offset to allow future adjustments\n7. Create fallback mechanism for testing environments with fixed dates\n8. Update all unit tests that rely on hard-coded date assumptions\n9. Document the new dynamic date calculation in the project README",
        "testStrategy": "1. Unit test the `getDynamicCutoffDate()` function with various current dates including edge cases (end of month, leap year February, year boundaries)\n2. Test timezone handling by setting system time to different zones and verifying consistent results\n3. Verify all earnings data fetches use the dynamic cutoff by checking API calls in network tab\n4. Test calendar view displays correct date ranges based on dynamic calculation\n5. Validate trade opportunity filtering correctly excludes opportunities beyond the dynamic cutoff\n6. Create integration tests that mock different current dates and verify the entire pipeline uses correct cutoffs\n7. Test configuration override functionality by temporarily changing the 2-month/1-week offset\n8. Verify backward compatibility by ensuring historical data analysis still works correctly\n9. Run end-to-end tests with system date set to various values to ensure consistent behavior",
        "status": "done",
        "dependencies": [
          3,
          5
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Research and Evaluate Composer.trade API for Automated Trading",
        "description": "Conduct comprehensive research on Composer.trade API capabilities, authentication methods, order types, and integration requirements to evaluate it as an alternative to Interactive Brokers for automated earnings calendar spread trades.",
        "details": "1. Create research documentation structure in /docs/composer-api-research.md\n2. Investigate API authentication methods: OAuth 2.0 flow, API key management, token refresh mechanisms\n3. Document all available order types: market, limit, stop-loss, stop-limit, bracket orders, OCO orders\n4. Analyze API rate limits: requests per minute/hour, concurrent connection limits, throttling behavior\n5. Map Composer.trade order types to earnings spread trade requirements: calendar spreads, iron condors, vertical spreads\n6. Test API endpoints using Postman collection: /api/v1/orders, /api/v1/positions, /api/v1/account\n7. Evaluate webhook support for order status updates and trade confirmations\n8. Create integration architecture diagram showing data flow from earnings calendar → trade analysis → order execution\n9. Document error handling patterns and retry mechanisms\n10. Compare Composer.trade vs Interactive Brokers on: commission structure, options liquidity, execution speed, available markets\n11. Create proof-of-concept Python script using requests library to test basic order placement\n12. Document security considerations: API key storage, request signing, SSL/TLS requirements\n13. Create decision matrix with scoring criteria for go/no-go decision",
        "testStrategy": "1. Verify all documented API endpoints return 200 status codes with valid authentication\n2. Test rate limiting by sending 100+ requests in rapid succession and verify proper 429 responses\n3. Validate order placement flow: create test orders in paper trading mode, verify order appears in positions\n4. Test error scenarios: invalid API keys, malformed requests, insufficient funds\n5. Verify webhook delivery by creating test endpoint and confirming order status updates\n6. Run integration test: connect earnings calendar data to Composer.trade API and execute mock calendar spread\n7. Performance test: measure API response times for order placement under different market conditions\n8. Security test: verify API keys are not logged, HTTPS is enforced, tokens expire correctly",
        "status": "pending",
        "dependencies": [
          7
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-21T23:19:00.050Z",
      "updated": "2025-08-22T20:11:07.164Z",
      "description": "Tasks for master context"
    }
  }
}